<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>少年的切糕</title>
  <subtitle>NCEPU-&gt;BUPT,目前研一</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-05-12T13:29:39.003Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>YoungSC</name>
    <email>younsc@foxmail.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2017/05/12/leetcode17_5_12/"/>
    <id>http://yoursite.com/2017/05/12/leetcode17_5_12/</id>
    <published>2017-05-12T13:31:25.756Z</published>
    <updated>2017-05-12T13:29:39.003Z</updated>
    
    <content type="html"><![CDATA[<p>title: LeetCode95、99<br>date: 2017-05-12 21:06:46<br>tags: [算法,leetcode]</p>
<h1 id="LeetCode_95">LeetCode 95</h1><h2 id="这道题是和不同的二叉树的个数问题相关的(Unique_Binary_Search_Trees),不同之处在于问题一中只要求统计个数，而问题二中需要构造出所有的二叉树。">这道题是和不同的二叉树的个数问题相关的(<a href="https://leetcode.com/problems/unique-binary-search-trees/#/description" target="_blank" rel="external">Unique Binary Search Trees</a>),不同之处在于问题一中只要求统计个数，而问题二中需要构造出所有的二叉树。</h2><h3 id="问题一用DP的方法是很容易实现的，是因为二叉树固定数字生成的二叉树是固定的，一个二叉树的种类由它可能的左子树和右子树数目决定的，所以DP轻松解决。">问题一用DP的方法是很容易实现的，是因为二叉树固定数字生成的二叉树是固定的，一个二叉树的种类由它可能的左子树和右子树数目决定的，所以DP轻松解决。</h3><h3 id="问题二我陷入了用DP的思路，后来事实证明DP也是可以完成的。但是我看到的更好的解法是用自上而下递归的策略。调用helper(1,n)完成。">问题二我陷入了用DP的思路，后来事实证明DP也是可以完成的。但是我看到的更好的解法是用自上而下递归的策略。调用<code>helper(1,n)</code>完成。</h3><pre><code><span class="built_in">vector</span>&lt;TreeNode*&gt; helper(<span class="keyword">int</span> start, <span class="keyword">int</span> end) {
    <span class="built_in">vector</span>&lt;TreeNode *&gt; results;
    <span class="keyword">if</span> (start&gt;end)
    {
        results.push_back(<span class="literal">NULL</span>);
        <span class="keyword">return</span> results;
    }

    <span class="keyword">for</span> (<span class="keyword">int</span> k = start; k &lt;= end; k++)
    {
        <span class="built_in">vector</span>&lt;TreeNode *&gt; left = helper(start, k - <span class="number">1</span>);
        <span class="built_in">vector</span>&lt;TreeNode *&gt; right = helper(k + <span class="number">1</span>, end);
        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;left.size(); i++)
        {
            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j&lt;right.size(); j++)
            {
                TreeNode * root = <span class="keyword">new</span> TreeNode(k);
                root-&gt;left = left[i];
                root-&gt;right = right[j];
                results.push_back(root);
            }
        }
    }
    <span class="keyword">return</span> results;
} 
</code></pre><h3 id="同时也说明一下另外一种解法。我们对于某一次生成有如下考虑">同时也说明一下另外一种解法。我们对于某一次生成有如下考虑</h3><ol>
<li>新的根只需要把之前的根作为自己的左子树。</li>
<li>新的节点不作为根加入之前的树，由于它是最大的肯定是一路向右。所以可以遍历之前的树，对于每一棵树，从根的右节点逐步下移，截断处剩下的部分作为新节点的左子树，直到最右侧的叶子节点为止。</li>
</ol>
<h1 id="LeetCode_99">LeetCode 99</h1><h2 id="题意描述：一个二叉树中的两个节点由于某些错误被交换了，找出他们并恢复二叉树。（空间复杂度上O(n)很容易，但是O(1)是不容易实现的）">题意描述：一个二叉树中的两个节点由于某些错误被交换了，找出他们并恢复二叉树。（空间复杂度上O<sub>(n)</sub>很容易，但是O<sub>(1)</sub>是不容易实现的）</h2><h3 id="这道题一开始我的思路是分别搜索一个根的左子树和右子树，比较根和左右节点关系是否正确，后来又考虑了交换的节点在树的一侧的情况和不在同一侧的情况，最后没有AC掉这道题。">这道题一开始我的思路是分别搜索一个根的左子树和右子树，比较根和左右节点关系是否正确，后来又考虑了交换的节点在树的一侧的情况和不在同一侧的情况，最后没有AC掉这道题。</h3><pre><code>这道题正确的思路应该考虑二叉树的性质，二叉树在中序遍历的时候(<span class="keyword">in</span> <span class="keyword">order</span>）数据的输出是从小到大的，
那么采用先序遍历二叉树的方式，就相当于顺序遍历数组发现被交换的两个数。
</code></pre><h3 id="在写这道题的代码的时候要结合二叉树来写，熟悉二叉树中序遍历的形式，尤其是对于第一个节点不存在先前节点，深度优先搜索它的左子树为空后，第一个节点可以作为先前节点，方便后续遍历。">在写这道题的代码的时候要结合二叉树来写，熟悉二叉树中序遍历的形式，尤其是对于第一个节点不存在先前节点，深度优先搜索它的左子树为空后，第一个节点可以作为先前节点，方便后续遍历。</h3>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;title: LeetCode95、99&lt;br&gt;date: 2017-05-12 21:06:46&lt;br&gt;tags: [算法,leetcode]&lt;/p&gt;
&lt;h1 id=&quot;LeetCode_95&quot;&gt;LeetCode 95&lt;/h1&gt;&lt;h2 id=&quot;这道题是和不同的二叉树的个数问
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>关于树状数组</title>
    <link href="http://yoursite.com/2015/11/20/My-New-Post/"/>
    <id>http://yoursite.com/2015/11/20/My-New-Post/</id>
    <published>2015-11-20T09:24:46.000Z</published>
    <updated>2016-12-08T13:26:10.674Z</updated>
    
    <content type="html"><![CDATA[<h1 id="树状数组可以用于快速从经常改变值得数组中求出某一部分的元素">树状数组可以用于快速从经常改变值得数组中求出某一部分的元素</h1><p>  用了几次树状数组，开始几次总也有不明白的地方，倒不是不会用，关键在于总感觉触摸不到精髓。</p>
<h2 id="现在写下一些个人的小想法。">现在写下一些个人的小想法。</h2><blockquote>
<ul>
<li>树状数组的核心在于标号末尾的0的个数，主要决定了控制范围，（如两个0是四个数的和，三个0是八个数的和，事实上每多出一个0的时候，控制的范围就增加了一倍，原来范围内的修改都要向计算原本和增加范围的和的数据进行更新，当然没有出现范围扩增时候也要向上更新）</li>
<li>对于一次求和操作，总是只能求出<strong>前若干项的和</strong></li>
<li>每次有更改的时候逐级向上修改，从图中可以清楚的看出来，每当末尾多出现一个0的时候就要进行一次汇总操作</li>
</ul>
</blockquote>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Insert</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> value)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">	++i;</span><br><span class="line">	<span class="keyword">while</span> (i &lt; tree.size())</span><br><span class="line">	&#123;</span><br><span class="line">		tree[i] += value;</span><br><span class="line">		i += i&amp;(-i);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>其中<code>i += i&amp;(-i);</code>，为什么要<code>+=</code>后面的东西呢？前面说过除了本身，每增加一次0的时候会计算一次和（对于增加一次0其实也就是控制范围大了一倍），<strong>所以加一次自己控制的范围</strong></p>
<p><img src="http://dongxicheng.org/wp-content/uploads/2011/04/binary_indexed_tree2.jpg" alt="cmd-markdown-logo"></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;树状数组可以用于快速从经常改变值得数组中求出某一部分的元素&quot;&gt;树状数组可以用于快速从经常改变值得数组中求出某一部分的元素&lt;/h1&gt;&lt;p&gt;  用了几次树状数组，开始几次总也有不明白的地方，倒不是不会用，关键在于总感觉触摸不到精髓。&lt;/p&gt;
&lt;h2 id=&quot;现在写下一
    
    </summary>
    
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2015/11/10/hello-world/"/>
    <id>http://yoursite.com/2015/11/10/hello-world/</id>
    <published>2015-11-10T10:04:57.650Z</published>
    <updated>2015-11-10T10:04:57.650Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="http://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="http://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="http://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick_Start">Quick Start</h2><h3 id="Create_a_new_post">Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run_server">Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate_static_files">Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy_to_remote_sites">Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;http://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;http://hexo.io
    
    </summary>
    
    
  </entry>
  
</feed>
